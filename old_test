package rosed

import (
	"reflect"
	"testing"
)

func Test_CombineColumns(t *testing.T) {
	type args struct {
		leftText        string
		rightText       string
		minSpaceBetween int
		widthTarget     int
		leftColPercent  float64
	}

	type result struct {
		combined string
		width    int
	}

	testCases := []struct {
		name   string
		input  args
		expect result
	}{
		{"empty lines", args{"", "", 0, 0, 0}, result{"", 0}},
		{"right col bigger", args{"This is a test string for the right side", "Column number two is right here! And it has a lot of content that will be wrapped", 2, 30, 0.5}, result{"This is a test  Column number\nstring for the  two is right\nright side      here! And it\n                has a lot of\n                content that\n                will be\n                wrapped", 30}},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			var actual result
			actual.combined, actual.width = CombineColumns(tc.input.leftText, tc.input.rightText, tc.input.minSpaceBetween, tc.input.widthTarget, tc.input.leftColPercent, nil)

			if actual.combined != tc.expect.combined {
				t.Errorf("expected output string to be %q but was %q", tc.expect.combined, actual.combined)
			}
			if actual.width != tc.expect.width {
				t.Errorf("expected output width to be %d but was %d", tc.expect.width, actual.width)
			}
		})
	}
}

func Test_Wrap(t *testing.T) {
	type args struct {
		width   int
		options *WrapOptions
		text    string
	}

	testCases := []struct {
		name   string
		input  args
		expect []string
	}{
		{"empty input", args{80, nil, ""}, []string{""}},
		{"not enough to wrap", args{80, nil, "a test string"}, []string{"a test string"}},
		{"2 line wrap", args{20, nil, "a string long enough to be wrapped"}, []string{"a string long enough", "to be wrapped"}},
		{"multi line wrap", args{20, nil, "a string long enough to be wrapped more than once"}, []string{"a string long enough", "to be wrapped more", "than once"}},
		{"invalid width of -1 is interpreted as 2", args{-1, nil, "test"}, []string{"t-", "e-", "st"}},
		{"invalid width of 0 is interpreted as 2", args{0, nil, "test"}, []string{"t-", "e-", "st"}},
		{"invalid width of 1 is interpreted as 2", args{1, nil, "test"}, []string{"t-", "e-", "st"}},
		{"valid width of 2", args{2, nil, "test"}, []string{"t-", "e-", "st"}},
		{"valid width of 3", args{3, nil, "test"}, []string{"te-", "st"}},
		{"2 paragraphs, not preserved", args{20, nil, "this is a line that is split by paragraph in the input.\n\nThis is the second paragraph"}, []string{"this is a line that", "is split by", "paragraph in the", "input. This is the", "second paragraph"}},
		{"1 paragraph, preserved", args{20, &WrapOptions{PreserveParagraphs: true}, "this is a line that is split by paragraph in the input."}, []string{"this is a line that", "is split by", "paragraph in the", "input."}},
		{"2 paragraphs, preserved", args{20, &WrapOptions{PreserveParagraphs: true}, "this is a line that is split by paragraph in the input.\n\nThis is the second paragraph"}, []string{"this is a line that", "is split by", "paragraph in the", "input.", "", "This is the second", "paragraph"}},
		{"3 paragraphs, preserved", args{20, &WrapOptions{PreserveParagraphs: true}, "this is a line that is split by paragraph in the input.\n\nThis is the second paragraph.\n\nAnd this is the third"}, []string{"this is a line that", "is split by", "paragraph in the", "input.", "", "This is the second", "paragraph.", "", "And this is the", "third"}},
		{"3 paragraphs, preserved with suffix & prefix", args{20, &WrapOptions{PreserveParagraphs: true, Suffix: "]", Prefix: "["}, "this is a line that is split by paragraph in the input.\n\nThis is the second paragraph.\n\nAnd this is the third"}, []string{"[this is a line]", "[that is split by]", "[paragraph in the]", "[input.]", "", "[This is the second]", "[paragraph.]", "", "[And this is the]", "[third]"}},
		{"3 paragraphs, preserved with para prefix & suffix & prefix", args{20, &WrapOptions{PreserveParagraphs: true, ParagraphPrefix: "- ", Suffix: "]", Prefix: "["}, "this is a line that is split by paragraph in the input.\n\nThis is the second paragraph.\n\nAnd this is the third"}, []string{"- [this is a line]", "[that is split by]", "[paragraph in the]", "[input.]", "", "- [This is the]", "[second paragraph.]", "", "- [And this is the]", "[third]"}},
		{"2 paragraphs, unpreserved with para prefix", args{20, &WrapOptions{ParagraphPrefix: "- "}, "this is a line that is split by paragraph in the input.\n\nThis is the second paragraph"}, []string{"- this is a line", "that is split by", "paragraph in the", "input. This is the", "second paragraph"}},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			var actual []string
			actual = Wrap(tc.input.text, tc.input.width, tc.input.options)

			if !reflect.DeepEqual(actual, tc.expect) {
				t.Errorf("expected output line(s) to be %q but was %q", tc.expect, actual)
			}
		})
	}
}

func Test_DefinitionsTable(t *testing.T) {

	testCases := []struct {
		name   string
		input  [][2]string
		expect string
	}{
		{"empty lines", [][2]string{}, ""},
		{"one def, no wrap", [][2]string{{"def1", "this is the first definition"}}, "  def1  - this is the first definition"},
		{"one def, one wrap", [][2]string{{"def1", "this is the first definition with a rather long outro which will cause it to become wrapped"}}, "  def1  - this is the first definition with a rather long outro which will cause\n          it to become wrapped"},
		{"one def, multi wrap", [][2]string{{"def1", "this is the first definition with a rather long outro which will cause it to become wrapped. Not only that, but it does it again just to be safe."}}, "  def1  - this is the first definition with a rather long outro which will cause\n          it to become wrapped. Not only that, but it does it again just to be\n          safe."},
		{"two defs, no wrap", [][2]string{{"def1", "this is the first definition."}, {"definition #2", "this is the second definition."}}, "  def1           - this is the first definition.\n\n  definition #2  - this is the second definition."},
		{"two defs, multiwrap", [][2]string{{"def1", "this is the first definition with a rather long outro which will cause it to become wrapped. Not only that, but it does it again just to be safe."}, {"definition #2", "this is the second definition, which talks on several different things, some of which will be wrapped."}}, "  def1           - this is the first definition with a rather long outro which\n                   will cause it to become wrapped. Not only that, but it does\n                   it again just to be safe.\n\n  definition #2  - this is the second definition, which talks on several\n                   different things, some of which will be wrapped."},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			actual := DefinitionsTable(tc.input, 80)

			if actual != tc.expect {
				t.Errorf("expected output string to be %q but was %q", tc.expect, actual)
			}
		})
	}
}

func Test_JustifyLine(t *testing.T) {

	testCases := []struct {
		name   string
		input  string
		width  int
		expect string
	}{
		{"empty line", "", 10, ""},
		{"no spaces", "bluh", 10, "bluh"},
		{"2 words", "word1 word2", 20, "word1          word2"},
		{"3 words", "word1 word2 word3", 20, "word1   word2  word3"},
		{"3 words with runs of spaces", "word1        word2  word3", 20, "word1   word2  word3"},
		{"line longer than width", "hello", 3, "hello"},
		{"bad width", "hello", -1, "hello"},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			actual := JustifyLine(tc.input, tc.width)

			if actual != tc.expect {
				t.Fatalf("expected output to be %q but was %q", tc.expect, actual)
			}
		})
	}
}

func Test_CollapseSpaces(t *testing.T) {
	testCases := []struct {
		name   string
		input  string
		expect string
	}{
		{"empty line", "", ""},
		{"no spaces", "bluh", "bluh"},
		{"2 words", "word1 word2", "word1 word2"},
		{"3 words", "word1 word2 word3", "word1 word2 word3"},
		{"3 words with runs of spaces", "word1        word2  word3", "word1 word2 word3"},
		{"run of non-uniform spaces", "word1 \t\t word2", "word1 word2"},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			actual := CollapseSpace(tc.input)

			if actual != tc.expect {
				t.Fatalf("expected output to be %q but was %q", tc.expect, actual)
			}
		})
	}
}
